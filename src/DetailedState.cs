using System;

// Warning: Spaghetti code below
public class DetailedState {

    public byte[] SnapShot;
    public uint CycleCounter;
    public ushort PC;
    public ushort SP;
    public byte A;
    public byte B;
    public byte C;
    public byte D;
    public byte E;
    public byte F;
    public byte H;
    public byte L;
    public byte Opcode;
    public bool Fetched;
    public bool Skip;
    public bool Halted;
    public byte[] VRAM;
    public byte[] SRAM;
    public byte[] WRAM;
    public byte[] HRAM;
    public uint DivLastUpdate;
    public uint TimaLastUpdate;
    public uint TmaTime;
    public uint NextSerialTime;
    public uint LastOamDmaUpdate;
    public uint MinIntTime;
    public uint UnhaltTime;
    public ushort RomBank;
    public ushort DmaSource;
    public ushort DmaDestination;
    public byte RamBank;
    public byte OamDmaPos;
    public byte HaltHdmaState;
    public bool IME;
    public bool EnableRam;
    public bool MbcLockup;
    public byte RamBankMode;
    public bool HdmaTransfer;
    public bool BiosMode;
    public bool Stopped;
    public byte Huc3RAMFlag;
    public ushort[] SgbSystemColors;
    public ushort[] SgbColors;
    public byte[] SgbAttributes;
    public byte[] SgbPacket;
    public byte[] SgbCommand;
    public byte SgbTransfer;
    public byte SgbCommandIndex;
    public byte SgbJoypadIndex;
    public byte SgbJoypadMask;
    public byte SgbPending;
    public byte SgbPendingCount;
    public byte SgbMask;
    public ushort[] DmgColorsBgr15;
    public byte[] BgPaletteData;
    public byte[] ObjPaletteData;
    public byte[] OamReaderBuffer;
    public bool[] OamReaderSzBuffer;
    public uint VideoCycles;
    public uint EnableDisplayM0Time;
    public ushort LastM0Time;
    public ushort NextM0Irq;
    public ushort BgTileWord;
    public ushort BgnTileWord;
    public byte[] SpAttribList;
    public byte[] SpByte0List;
    public byte[] SpByte1List;
    public byte WinYPos;
    public byte XPos;
    public byte EndX;
    public byte PPUReg0;
    public byte PPUReg1;
    public byte BgAttrib;
    public byte BgnAttrib;
    public byte PPUState;
    public byte NextSprite;
    public byte CurrentSprite;
    public byte LYC;
    public byte M0LYC;
    public byte OldWy;
    public byte WinDrawState;
    public byte wSCX;
    public bool weMaster;
    public bool PendingLcdstatIrq;
    public bool IsCgb;
    public uint SPUCycleCounter;
    public byte SPULastUpdate;
    public uint SweepCounter;
    public ushort SweepShadow;
    public bool SweepNeg;
    public uint Duty1NextPosUpdate;
    public byte Duty1Pos;
    public bool Duty1High;
    public uint Env1Counter;
    public byte Env1Volume;
    public uint Len1Counter;
    public ushort Len1LengthCounter;
    public byte Nr10;
    public byte Nr13;
    public byte Nr14;
    public bool Ch1Master;
    public uint Duty2NextPosUpdate;
    public byte Duty2Pos;
    public bool Duty2High;
    public uint Env2Counter;
    public byte Env2Volume;
    public uint Len2Counter;
    public ushort Len2LengthCounter;
    public byte Nr23;
    public byte Nr24;
    public bool Ch2Master;
    public byte[] WaveRAM;
    public uint Len3Counter;
    public ushort Len3LengthCounter;
    public uint WaveCounter;
    public uint WaveLastReadTime;
    public byte WavePos;
    public byte WaveSampleBuffer;
    public byte Nr33;
    public byte Nr34;
    public bool Ch3Master;
    public uint LFSRCounter;
    public ushort LFSRReg;
    public uint Env4Counter;
    public byte Env4Volume;
    public uint Len4Counter;
    public ushort Len4LengthCounter;
    public byte Nr44;
    public bool Ch4Master;
    public uint Seconds;
    public uint LastTimeSec;
    public uint LastTimeUSec;
    public uint LastCycles;
    public uint RTCHaltTime;
    public byte RTCDataDh;
    public byte RTCDataDl;
    public byte RTCDataH;
    public byte RTCDataM;
    public byte RTCDataS;
    public bool RTCLastLatchData;
    public uint HuC3HaltTime;
    public uint HuC3DataTime;
    public uint HuC3WritingTime;
    public uint HuC3IrBaseCycle;
    public bool HuC3Halted;
    public byte HuC3Shift;
    public byte HuC3RamValue;
    public byte HuC3ModeFlag;
    public bool HuC3IrReceivingPulse;

    public DetailedState(string file) : this(System.IO.File.ReadAllBytes(file)) {
    }

    public DetailedState(byte[] state) {
        ReadStream data = new ReadStream(state);
        Debug.Assert(data.u24be() == 0xff0201, "Not a gambatte savestate");
        int snapshotSize = data.u24be();
        SnapShot = data.Read(snapshotSize);

        while(data.Position < state.Length) {
            string label = "";
            byte character;
            while((character = data.u8()) != 0x00) label += Convert.ToChar(character);
            int size = data.u24be();

            long startPos = data.Position;

            switch(label) {
                case "cc": CycleCounter = data.u32be(); break;
                case "pc": PC = data.u16be(); break;
                case "sp": SP = data.u16be(); break;
                case "a": A = data.u8(); break;
                case "b": B = data.u8(); break;
                case "c": C = data.u8(); break;
                case "d": D = data.u8(); break;
                case "e": E = data.u8(); break;
                case "f": F = data.u8(); break;
                case "h": H = data.u8(); break;
                case "l": L = data.u8(); break;
                case "op": Opcode = data.u8(); break;
                case "fetched": Fetched = data.boolean(); break;
                case "skip": Skip = data.boolean(); break;
                case "halt": Halted = data.boolean(); break;
                case "vram": VRAM = data.Read(size); break;
                case "sram": SRAM = data.Read(size); break;
                case "wram": WRAM = data.Read(size); break;
                case "hram": HRAM = data.Read(size); break;
                case "ldivup": DivLastUpdate = data.u32be(); break;
                case "ltimaup": TimaLastUpdate = data.u32be(); break;
                case "tmatime": TmaTime = data.u32be(); break;
                case "serialt": NextSerialTime = data.u32be(); break;
                case "lodmaup": LastOamDmaUpdate = data.u32be(); break;
                case "minintt": MinIntTime = data.u32be(); break;
                case "unhaltt": UnhaltTime = data.u32be(); break;
                case "rombank": RomBank = data.u16be(); break;
                case "dmasrc": DmaSource = data.u16be(); break;
                case "dmadst": DmaDestination = data.u16be(); break;
                case "rambank": RamBank = data.u8(); break;
                case "odmapos": OamDmaPos = data.u8(); break;
                case "hlthdma": HaltHdmaState = data.u8(); break;
                case "ime": IME = data.boolean(); break;
                case "sramon": EnableRam = data.boolean(); break;
                case "mbclock": MbcLockup = data.boolean(); break;
                case "rambmod": RamBankMode = data.u8(); break;
                case "hdma": HdmaTransfer = data.boolean(); break;
                case "bios": BiosMode = data.boolean(); break;
                case "stopped": Stopped = data.boolean(); break;
                case "huc3ram": Huc3RAMFlag = data.u8(); break;
                case "sgbsys": SgbSystemColors = data.ReadBE(size / 2); break;
                case "sgbcols": SgbColors = data.ReadBE(size / 2); break;
                case "sgbattr": SgbAttributes = data.Read(size); break;
                case "sgbpkt": SgbPacket = data.Read(size); break;
                case "sgbcmd": SgbCommand = data.Read(size); break;
                case "sgbxfer": SgbTransfer = data.u8(); break;
                case "sgbcmdi": SgbCommandIndex = data.u8(); break;
                case "sgbjoyi": SgbJoypadIndex = data.u8(); break;
                case "sgbjoym": SgbJoypadMask = data.u8(); break;
                case "sgbpend": SgbPending = data.u8(); break;
                case "sgbpc": SgbPendingCount = data.u8(); break;
                case "sgbmask": SgbMask = data.u8(); break;
                case "dmgcols": DmgColorsBgr15 = data.ReadBE(size / 2); break;
                case "bgp": BgPaletteData = data.Read(size); break;
                case "objp": ObjPaletteData = data.Read(size); break;
                case "sposbuf": OamReaderBuffer = data.Read(size); break;
                case "spszbuf": OamReaderSzBuffer = data.ReadBools(size); break;
                case "spattr": SpAttribList = data.Read(size); break;
                case "spbyte0": SpByte0List = data.Read(size); break;
                case "spbyte1": SpByte1List = data.Read(size); break;
                case "vcycles": VideoCycles = data.u32be(); break;
                case "edM0tim": EnableDisplayM0Time = data.u32be(); break;
                case "m0time": LastM0Time = data.u16be(); break;
                case "nm0irq": NextM0Irq = data.u16be(); break;
                case "bgtw": BgTileWord = data.u16be(); break;
                case "bgntw": BgnTileWord = data.u16be(); break;
                case "winypos": WinYPos = data.u8(); break;
                case "xpos": XPos = data.u8(); break;
                case "endx": EndX = data.u8(); break;
                case "ppur0": PPUReg0 = data.u8(); break;
                case "ppur1": PPUReg1 = data.u8(); break;
                case "bgatrb": BgAttrib = data.u8(); break;
                case "bgnatrb": BgnAttrib = data.u8(); break;
                case "ppustat": PPUState = data.u8(); break;
                case "nsprite": NextSprite = data.u8(); break;
                case "csprite": CurrentSprite = data.u8(); break;
                case "lyc": LYC = data.u8(); break;
                case "m0lyc": M0LYC = data.u8(); break;
                case "oldwy": OldWy = data.u8(); break;
                case "windraw": WinDrawState = data.u8(); break;
                case "wscx": wSCX = data.u8(); break;
                case "wemastr": weMaster = data.boolean(); break;
                case "lcdsirq": PendingLcdstatIrq = data.boolean(); break;
                case "iscgb": IsCgb = data.boolean(); break;
                case "spucntr": SPUCycleCounter = data.u32be(); break;
                case "spucntl": SPULastUpdate = data.u8(); break;
                case "swpcntr": SweepCounter = data.u32be(); break;
                case "swpshdw": SweepShadow = data.u16be(); break;
                case "swpneg": SweepNeg = data.boolean(); break;
                case "dut1ctr": Duty1NextPosUpdate = data.u32be(); break;
                case "dut1pos": Duty1Pos = data.u8(); break;
                case "dut1hi": Duty1High = data.boolean(); break;
                case "env1ctr": Env1Counter = data.u32be(); break;
                case "env1vol": Env1Volume = data.u8(); break;
                case "len1ctr": Len1Counter = data.u32be(); break;
                case "len1val": Len1LengthCounter = data.u16be(); break;
                case "nr10": Nr10 = data.u8(); break;
                case "nr13": Nr13 = data.u8(); break;
                case "nr14": Nr14 = data.u8(); break;
                case "c1mastr": Ch1Master = data.boolean(); break;
                case "dut2ctr": Duty2NextPosUpdate = data.u32be(); break;
                case "dut2pos": Duty2Pos = data.u8(); break;
                case "dut2hi": Duty2High = data.boolean(); break;
                case "env2ctr": Env2Counter = data.u32be(); break;
                case "env2vol": Env2Volume = data.u8(); break;
                case "len2ctr": Len2Counter = data.u32be(); break;
                case "len2val": Len2LengthCounter = data.u16be(); break;
                case "nr23": Nr23 = data.u8(); break;
                case "nr24": Nr24 = data.u8(); break;
                case "c2mastr": Ch2Master = data.boolean(); break;
                case "waveram": WaveRAM = data.Read(size); break;
                case "len3ctr": Len3Counter = data.u32be(); break;
                case "len3val": Len3LengthCounter = data.u16be(); break;
                case "wavectr": WaveCounter = data.u32be(); break;
                case "lwavrdt": WaveLastReadTime = data.u32be(); break;
                case "wavepos": WavePos = data.u8(); break;
                case "wavsmpl": WaveSampleBuffer = data.u8(); break;
                case "nr33": Nr33 = data.u8(); break;
                case "nr34": Nr34 = data.u8(); break;
                case "c3mastr": Ch3Master = data.boolean(); break;
                case "lfsrctr": LFSRCounter = data.u32be(); break;
                case "lfsrreg": LFSRReg = data.u16be(); break;
                case "env4ctr": Env4Counter = data.u32be(); break;
                case "env4vol": Env4Volume = data.u8(); break;
                case "len4ctr": Len4Counter = data.u32be(); break;
                case "len4val": Len4LengthCounter = data.u16be(); break;
                case "nr44": Nr44 = data.u8(); break;
                case "c4mastr": Ch4Master = data.boolean(); break;
                case "timesec": Seconds = data.u32be(); break;
                case "timelts": LastTimeSec = data.u32be(); break;
                case "timeltu": LastTimeUSec = data.u32be(); break;
                case "timelc": LastCycles = data.u32be(); break;
                case "rtchalt": RTCHaltTime = data.u32be(); break;
                case "rtcdh": RTCDataDh = data.u8(); break;
                case "rtcdl": RTCDataDl = data.u8(); break;
                case "rtch": RTCDataH = data.u8(); break;
                case "rtcm": RTCDataM = data.u8(); break;
                case "rtcs": RTCDataS = data.u8(); break;
                case "rtclld": RTCLastLatchData = data.boolean(); break;
                case "h3haltt": HuC3HaltTime = data.u32be(); break;
                case "h3datat": HuC3DataTime = data.u32be(); break;
                case "h3writt": HuC3WritingTime = data.u32be(); break;
                case "h3halt": HuC3Halted = data.boolean(); break;
                case "h3shft": HuC3Shift = data.u8(); break;
                case "h3rv": HuC3RamValue = data.u8(); break;
                case "h3mf": HuC3ModeFlag = data.u8(); break;
                case "h3ircy": HuC3IrBaseCycle = data.u32be(); break;
                case "h3irac": HuC3IrReceivingPulse = data.boolean(); break;
                default:
                    Console.WriteLine("Unhandled label: " + label);
                    data.Seek(size);
                    break;
            }

            long endPos = data.Position;
            Debug.Assert(endPos - startPos == size, "Read incorrect number of bytes of label " + label);
        }
    }

    public byte[] ToBuffer() {
        WriteStream data = new WriteStream();

        data.u24be(0xff0201);
        data.u24be(SnapShot.Length); data.Write(SnapShot);
        data.Write("a"); data.u24be(sizeof(byte)); data.u8(A);
        data.Write("b"); data.u24be(sizeof(byte)); data.u8(B);
        data.Write("bgatrb"); data.u24be(sizeof(byte)); data.u8(BgAttrib);
        data.Write("bgnatrb"); data.u24be(sizeof(byte)); data.u8(BgnAttrib);
        data.Write("bgntw"); data.u24be(sizeof(ushort)); data.u16be(BgnTileWord);
        data.Write("bgp"); data.u24be(ObjPaletteData.Length); data.Write(BgPaletteData);
        data.Write("bgtw"); data.u24be(sizeof(ushort)); data.u16be(BgTileWord);
        data.Write("bios"); data.u24be(sizeof(bool)); data.boolean(BiosMode);
        data.Write("c"); data.u24be(sizeof(byte)); data.u8(C);
        data.Write("c1mastr"); data.u24be(sizeof(bool)); data.boolean(Ch1Master);
        data.Write("c2mastr"); data.u24be(sizeof(bool)); data.boolean(Ch2Master);
        data.Write("c3mastr"); data.u24be(sizeof(bool)); data.boolean(Ch3Master);
        data.Write("c4mastr"); data.u24be(sizeof(bool)); data.boolean(Ch4Master);
        data.Write("cc"); data.u24be(sizeof(uint)); data.u32be(CycleCounter);
        data.Write("csprite"); data.u24be(sizeof(byte)); data.u8(CurrentSprite);
        data.Write("d"); data.u24be(sizeof(byte)); data.u8(D);
        data.Write("dmadst"); data.u24be(sizeof(ushort)); data.u16be(DmaDestination);
        data.Write("dmasrc"); data.u24be(sizeof(ushort)); data.u16be(DmaSource);
        data.Write("dmgcols"); data.u24be(DmgColorsBgr15.Length * 2); data.Write(DmgColorsBgr15);
        data.Write("dut1ctr"); data.u24be(sizeof(uint)); data.u32be(Duty1NextPosUpdate);
        data.Write("dut1hi"); data.u24be(sizeof(bool)); data.boolean(Duty1High);
        data.Write("dut1pos"); data.u24be(sizeof(byte)); data.u8(Duty1Pos);
        data.Write("dut2ctr"); data.u24be(sizeof(uint)); data.u32be(Duty2NextPosUpdate);
        data.Write("dut2hi"); data.u24be(sizeof(bool)); data.boolean(Duty2High);
        data.Write("dut2pos"); data.u24be(sizeof(byte)); data.u8(Duty2Pos);
        data.Write("e"); data.u24be(sizeof(byte)); data.u8(E);
        data.Write("edM0tim"); data.u24be(sizeof(uint)); data.u32be(EnableDisplayM0Time);
        data.Write("endx"); data.u24be(sizeof(byte)); data.u8(EndX);
        data.Write("env1ctr"); data.u24be(sizeof(uint)); data.u32be(Env1Counter);
        data.Write("env1vol"); data.u24be(sizeof(byte)); data.u8(Env1Volume);
        data.Write("env2ctr"); data.u24be(sizeof(uint)); data.u32be(Env2Counter);
        data.Write("env2vol"); data.u24be(sizeof(byte)); data.u8(Env2Volume);
        data.Write("env4ctr"); data.u24be(sizeof(uint)); data.u32be(Env4Counter);
        data.Write("env4vol"); data.u24be(sizeof(byte)); data.u8(Env4Volume);
        data.Write("f"); data.u24be(sizeof(byte)); data.u8(F);
        data.Write("fetched"); data.u24be(sizeof(bool)); data.boolean(Fetched);
        data.Write("h"); data.u24be(sizeof(byte)); data.u8(H);
        data.Write("h3datat"); data.u24be(sizeof(uint)); data.u32be(HuC3DataTime);
        data.Write("h3halt"); data.u24be(sizeof(bool)); data.boolean(HuC3Halted);
        data.Write("h3haltt"); data.u24be(sizeof(uint)); data.u32be(HuC3HaltTime);
        data.Write("h3irac"); data.u24be(sizeof(bool)); data.boolean(HuC3IrReceivingPulse);
        data.Write("h3ircy"); data.u24be(sizeof(uint)); data.u32be(HuC3IrBaseCycle);
        data.Write("h3mf"); data.u24be(sizeof(byte)); data.u8(HuC3ModeFlag);
        data.Write("h3rv"); data.u24be(sizeof(byte)); data.u8(HuC3RamValue);
        data.Write("h3shft"); data.u24be(sizeof(byte)); data.u8(HuC3Shift);
        data.Write("h3writt"); data.u24be(sizeof(uint)); data.u32be(HuC3WritingTime);
        data.Write("halt"); data.u24be(sizeof(bool)); data.boolean(Halted);
        data.Write("hdma"); data.u24be(sizeof(bool)); data.boolean(HdmaTransfer);
        data.Write("hlthdma"); data.u24be(sizeof(byte)); data.u8(HaltHdmaState);
        data.Write("hram"); data.u24be(HRAM.Length); data.Write(HRAM);
        data.Write("huc3ram"); data.u24be(sizeof(byte)); data.u8(Huc3RAMFlag);
        data.Write("ime"); data.u24be(sizeof(bool)); data.boolean(IME);
        data.Write("iscgb"); data.u24be(sizeof(bool)); data.boolean(IsCgb);
        data.Write("l"); data.u24be(sizeof(byte)); data.u8(L);
        data.Write("lcdsirq"); data.u24be(sizeof(bool)); data.boolean(PendingLcdstatIrq);
        data.Write("ldivup"); data.u24be(sizeof(uint)); data.u32be(DivLastUpdate);
        data.Write("len1ctr"); data.u24be(sizeof(uint)); data.u32be(Len1Counter);
        data.Write("len1val"); data.u24be(sizeof(ushort)); data.u16be(Len1LengthCounter);
        data.Write("len2ctr"); data.u24be(sizeof(uint)); data.u32be(Len2Counter);
        data.Write("len2val"); data.u24be(sizeof(ushort)); data.u16be(Len2LengthCounter);
        data.Write("len3ctr"); data.u24be(sizeof(uint)); data.u32be(Len3Counter);
        data.Write("len3val"); data.u24be(sizeof(ushort)); data.u16be(Len3LengthCounter);
        data.Write("len4ctr"); data.u24be(sizeof(uint)); data.u32be(Len4Counter);
        data.Write("len4val"); data.u24be(sizeof(ushort)); data.u16be(Len4LengthCounter);
        data.Write("lfsrctr"); data.u24be(sizeof(uint)); data.u32be(LFSRCounter);
        data.Write("lfsrreg"); data.u24be(sizeof(ushort)); data.u16be(LFSRReg);
        data.Write("lodmaup"); data.u24be(sizeof(uint)); data.u32be(LastOamDmaUpdate);
        data.Write("ltimaup"); data.u24be(sizeof(uint)); data.u32be(TimaLastUpdate);
        data.Write("lwavrdt"); data.u24be(sizeof(uint)); data.u32be(WaveLastReadTime);
        data.Write("lyc"); data.u24be(sizeof(byte)); data.u8(LYC);
        data.Write("m0lyc"); data.u24be(sizeof(byte)); data.u8(M0LYC);
        data.Write("m0time"); data.u24be(sizeof(ushort)); data.u16be(LastM0Time);
        data.Write("mbclock"); data.u24be(sizeof(bool)); data.boolean(MbcLockup);
        data.Write("minintt"); data.u24be(sizeof(uint)); data.u32be(MinIntTime);
        data.Write("nm0irq"); data.u24be(sizeof(ushort)); data.u16be(NextM0Irq);
        data.Write("nr10"); data.u24be(sizeof(byte)); data.u8(Nr10);
        data.Write("nr13"); data.u24be(sizeof(byte)); data.u8(Nr13);
        data.Write("nr14"); data.u24be(sizeof(byte)); data.u8(Nr14);
        data.Write("nr23"); data.u24be(sizeof(byte)); data.u8(Nr23);
        data.Write("nr24"); data.u24be(sizeof(byte)); data.u8(Nr24);
        data.Write("nr33"); data.u24be(sizeof(byte)); data.u8(Nr33);
        data.Write("nr34"); data.u24be(sizeof(byte)); data.u8(Nr34);
        data.Write("nr44"); data.u24be(sizeof(byte)); data.u8(Nr44);
        data.Write("nsprite"); data.u24be(sizeof(byte)); data.u8(NextSprite);
        data.Write("objp"); data.u24be(ObjPaletteData.Length); data.Write(ObjPaletteData);
        data.Write("odmapos"); data.u24be(sizeof(byte)); data.u8(OamDmaPos);
        data.Write("oldwy"); data.u24be(sizeof(byte)); data.u8(OldWy);
        data.Write("op"); data.u24be(sizeof(byte)); data.u8(Opcode);
        data.Write("pc"); data.u24be(sizeof(ushort)); data.u16be(PC);
        data.Write("ppur0"); data.u24be(sizeof(byte)); data.u8(PPUReg0);
        data.Write("ppur1"); data.u24be(sizeof(byte)); data.u8(PPUReg1);
        data.Write("ppustat"); data.u24be(sizeof(byte)); data.u8(PPUState);
        data.Write("rambank"); data.u24be(sizeof(byte)); data.u8(RamBank);
        data.Write("rambmod"); data.u24be(sizeof(byte)); data.u8(RamBankMode);
        data.Write("rombank"); data.u24be(sizeof(ushort)); data.u16be(RomBank);
        data.Write("rtcdh"); data.u24be(sizeof(byte)); data.u8(RTCDataDh);
        data.Write("rtcdl"); data.u24be(sizeof(byte)); data.u8(RTCDataDl);
        data.Write("rtch"); data.u24be(sizeof(byte)); data.u8(RTCDataH);
        data.Write("rtchalt"); data.u24be(sizeof(uint)); data.u32be(RTCHaltTime);
        data.Write("rtclld"); data.u24be(sizeof(bool)); data.boolean(RTCLastLatchData);
        data.Write("rtcm"); data.u24be(sizeof(byte)); data.u8(RTCDataM);
        data.Write("rtcs"); data.u24be(sizeof(byte)); data.u8(RTCDataS);
        data.Write("serialt"); data.u24be(sizeof(uint)); data.u32be(NextSerialTime);
        data.Write("sgbattr"); data.u24be(SgbAttributes.Length); data.Write(SgbAttributes);
        data.Write("sgbcmd"); data.u24be(SgbCommand.Length); data.Write(SgbCommand);
        data.Write("sgbcmdi"); data.u24be(sizeof(byte)); data.u8(SgbCommandIndex);
        data.Write("sgbcols"); data.u24be(SgbColors.Length * 2); data.Write(SgbColors);
        data.Write("sgbjoyi"); data.u24be(sizeof(byte)); data.u8(SgbJoypadIndex);
        data.Write("sgbjoym"); data.u24be(sizeof(byte)); data.u8(SgbJoypadMask);
        data.Write("sgbmask"); data.u24be(sizeof(byte)); data.u8(SgbMask);
        data.Write("sgbpc"); data.u24be(sizeof(byte)); data.u8(SgbPendingCount);
        data.Write("sgbpend"); data.u24be(sizeof(byte)); data.u8(SgbPending);
        data.Write("sgbpkt"); data.u24be(SgbPacket.Length); data.Write(SgbPacket);
        data.Write("sgbsys"); data.u24be(SgbSystemColors.Length * 2); data.Write(SgbSystemColors);
        data.Write("sgbxfer"); data.u24be(sizeof(byte)); data.u8(SgbTransfer);
        data.Write("skip"); data.u24be(sizeof(bool)); data.boolean(Skip);
        data.Write("sp"); data.u24be(sizeof(ushort)); data.u16be(SP);
        data.Write("spattr"); data.u24be(SpAttribList.Length); data.Write(SpAttribList);
        data.Write("spbyte0"); data.u24be(SpByte0List.Length); data.Write(SpByte0List);
        data.Write("spbyte1"); data.u24be(SpByte1List.Length); data.Write(SpByte1List);
        data.Write("sposbuf"); data.u24be(OamReaderBuffer.Length); data.Write(OamReaderBuffer);
        data.Write("spszbuf"); data.u24be(OamReaderSzBuffer.Length); data.Write(OamReaderSzBuffer);
        data.Write("spucntl"); data.u24be(sizeof(byte)); data.u8(SPULastUpdate);
        data.Write("spucntr"); data.u24be(sizeof(uint)); data.u32be(SPUCycleCounter);
        data.Write("sram"); data.u24be(SRAM.Length); data.Write(SRAM);
        data.Write("sramon"); data.u24be(sizeof(bool)); data.boolean(EnableRam);
        data.Write("stopped"); data.u24be(sizeof(bool)); data.boolean(Stopped);
        data.Write("swpcntr"); data.u24be(sizeof(uint)); data.u32be(SweepCounter);
        data.Write("swpneg"); data.u24be(sizeof(bool)); data.boolean(SweepNeg);
        data.Write("swpshdw"); data.u24be(sizeof(ushort)); data.u16be(SweepShadow);
        data.Write("timelc"); data.u24be(sizeof(uint)); data.u32be(LastCycles);
        data.Write("timelts"); data.u24be(sizeof(uint)); data.u32be(LastTimeSec);
        data.Write("timeltu"); data.u24be(sizeof(uint)); data.u32be(LastTimeUSec);
        data.Write("timesec"); data.u24be(sizeof(uint)); data.u32be(Seconds);
        data.Write("tmatime"); data.u24be(sizeof(uint)); data.u32be(TmaTime);
        data.Write("unhaltt"); data.u24be(sizeof(uint)); data.u32be(UnhaltTime);
        data.Write("vcycles"); data.u24be(sizeof(uint)); data.u32be(VideoCycles);
        data.Write("vram"); data.u24be(VRAM.Length); data.Write(VRAM);
        data.Write("wavectr"); data.u24be(sizeof(uint)); data.u32be(WaveCounter);
        data.Write("wavepos"); data.u24be(sizeof(byte)); data.u8(WavePos);
        data.Write("waveram"); data.u24be(WaveRAM.Length); data.Write(WaveRAM);
        data.Write("wavsmpl"); data.u24be(sizeof(byte)); data.u8(WaveSampleBuffer);
        data.Write("wemastr"); data.u24be(sizeof(bool)); data.boolean(weMaster);
        data.Write("windraw"); data.u24be(sizeof(byte)); data.u8(WinDrawState);
        data.Write("winypos"); data.u24be(sizeof(byte)); data.u8(WinYPos);
        data.Write("wram"); data.u24be(WRAM.Length); data.Write(WRAM);
        data.Write("wscx"); data.u24be(sizeof(byte)); data.u8(wSCX);
        data.Write("xpos"); data.u24be(sizeof(byte)); data.u8(XPos);

        return data.ToArray();
    }
}